#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_PRODUCTIONS 10
#define MAX_SYMBOLS 10

char productions[MAX_PRODUCTIONS][MAX_SYMBOLS];
char first[MAX_SYMBOLS][MAX_SYMBOLS];
char follow[MAX_SYMBOLS][MAX_SYMBOLS];
char nonTerminals[MAX_SYMBOLS];
int numProductions, numNonTerminals;

// Function to check if a character is in a string
int isIn(char *str, char c) {
    int i;
    for (i = 0; i < strlen(str); i++) {
        if (str[i] == c) return 1;
    }
    return 0;
}

// Function to add a character to a string if it is not already present
void addToSet(char *set, char c) {
    if (!isIn(set, c)) {
        int len = strlen(set);
        set[len] = c;
        set[len + 1] = '\0';
    }
}

// Function to compute FIRST set for a given non-terminal
void computeFirst(char nonTerminal) {
    int i, j;
    for (i = 0; i < numProductions; i++) {
        if (productions[i][0] == nonTerminal) {
            for (j = 3; j < strlen(productions[i]); j++) { // Skip "A->"
                char symbol = productions[i][j];

                if (islower(symbol)) { // Terminal
                    addToSet(first[nonTerminal - 'A'], symbol);
                    break;
                } else if (isupper(symbol)) { // Non-terminal
                    strcat(first[nonTerminal - 'A'], first[symbol - 'A']);
                    if (!isIn(first[symbol - 'A'], 'e')) break;
                }
            }
        }
    }
}

// Function to compute FOLLOW set for a given non-terminal
void computeFollow(char nonTerminal) {
    int i, j;
    if (nonTerminal == productions[0][0]) { // Start symbol
        addToSet(follow[nonTerminal - 'A'], '$');
    }

    for (i = 0; i < numProductions; i++) {
        for (j = 3; j < strlen(productions[i]); j++) {
            if (productions[i][j] == nonTerminal) {
                if (productions[i][j + 1] != '\0') { // If there is a symbol after
                    char nextSymbol = productions[i][j + 1];

                    if (islower(nextSymbol)) { // Terminal
                        addToSet(follow[nonTerminal - 'A'], nextSymbol);
                    } else if (isupper(nextSymbol)) { // Non-terminal
                        strcat(follow[nonTerminal - 'A'], first[nextSymbol - 'A']);

                        if (isIn(first[nextSymbol - 'A'], 'e')) { // If nullable
                            strcat(follow[nonTerminal - 'A'], follow[productions[i][0] - 'A']);
                        }
                    }
                } else { // If at end, add FOLLOW of LHS
                    strcat(follow[nonTerminal - 'A'], follow[productions[i][0] - 'A']);
                }
            }
        }
    }
}

// Function to compute FIRST sets for all non-terminals
void computeAllFirst() {
    int i;
    for (i = 0; i < numNonTerminals; i++) {
        computeFirst(nonTerminals[i]);
    }
}

// Function to compute FOLLOW sets for all non-terminals
void computeAllFollow() {
    int i;
    for (i = 0; i < numNonTerminals; i++) {
        computeFollow(nonTerminals[i]);
    }
}

int main() {
    int i, j;
    printf("Enter the number of productions: ");
    scanf("%d", &numProductions);
    getchar(); // Consume newline

    printf("Enter the productions (e.g., A->aB | A->b | B->c):\n");
    for (i = 0; i < numProductions; i++) {
        fgets(productions[i], MAX_SYMBOLS, stdin);
        productions[i][strcspn(productions[i], "\n")] = 0; // Remove newline
    }

    // Extract non-terminals
    numNonTerminals = 0;
    for (i = 0; i < numProductions; i++) {
        if (!isIn(nonTerminals, productions[i][0])) {
            nonTerminals[numNonTerminals++] = productions[i][0];
        }
    }

    // Initialize FIRST and FOLLOW sets
    for (i = 0; i < numNonTerminals; i++) {
        first[nonTerminals[i] - 'A'][0] = '\0';
        follow[nonTerminals[i] - 'A'][0] = '\0';
    }

    // Compute FIRST and FOLLOW sets
    computeAllFirst();
    computeAllFollow();

    // Print FIRST sets
    printf("\nFIRST Sets:\n");
    for (i = 0; i < numNonTerminals; i++) {
        printf("FIRST(%c) = { ", nonTerminals[i]);
        for (j = 0; j < strlen(first[nonTerminals[i] - 'A']); j++) {
            printf("%c ", first[nonTerminals[i] - 'A'][j]);
        }
        printf("}\n");
    }

    // Print FOLLOW sets
    printf("\nFOLLOW Sets:\n");
    for (i = 0; i < numNonTerminals; i++) {
        printf("FOLLOW(%c) = { ", nonTerminals[i]);
        for (j = 0; j < strlen(follow[nonTerminals[i] - 'A']); j++) {
            printf("%c ", follow[nonTerminals[i] - 'A'][j]);
        }
        printf("}\n");
    }

    return 0;
}
